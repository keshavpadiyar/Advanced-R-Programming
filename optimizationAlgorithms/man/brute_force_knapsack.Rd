% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brute_force_knapsack.R
\name{brute_force_knapsack}
\alias{brute_force_knapsack}
\title{Implementation of Brute-force method to solve knapsack problem}
\usage{
brute_force_knapsack(x, W, parallel = FALSE)
}
\arguments{
\item{x}{: Input Data.Frame having Columns v (values) and their w (weights)}

\item{W}{: Input Numeric - maximum capacity of the knapsack}

\item{parallel}{: Input Flag, by default the value is FALSE.
FALSE: The algorithm follows normal execution routine.
TRUE: Parallelism is activated and the execution routine follows execution on multiple workers}
}
\value{
The function returns a list having a> maximum values b> elements that can be filled into the knapsack
}
\description{
Implementation of Brute-force method to solve knapsack problem
}
\details{
This algorithm can be used to solve the knapsack problem - Given a set of items,
         each with a weight and a value, determine the number of each item to include in a collection so that
         total weight is less than or equal to a given limit and the total value is as large as possible. This algorithm
         enumerates all n-combinations of n objects. to find the max value and all the elements that can be fitted into the
         knapsack. But When number of  item (n) is increased, execution time starts to increase rapidly. For more details
         refer
\url{https://en.wikipedia.org/wiki/Knapsack_problem}
}
\examples{

\dontrun{
 brute_force_knapsack(x = knapsack_objects[1:16,], W = 3500)
 $value
 [1] 24644
$element
 [1]  4  7  9 13 15
 }

}
